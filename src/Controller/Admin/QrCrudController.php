<?php

namespace App\Controller\Admin;

use App\Controller\Admin\Embed\UrlCrudController;
use App\Entity\Tenant\Qr;
use App\Entity\Tenant\Url;
use App\Helper\DownloadHelper;
use App\Repository\QrHitTrackerRepository;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Assets;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\Filters;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Contracts\Controller\CrudControllerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Dto\BatchActionDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\CollectionField;
use EasyCorp\Bundle\EasyAdminBundle\Field\Field;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Filter\ChoiceFilter;
use Endroid\QrCode\Exception\ValidationException;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\StreamedResponse;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Translation\TranslatableMessage;

/**
 * @template TData of CrudControllerInterface
 */
class QrCrudController extends AbstractTenantAwareCrudController
{
    #[\Symfony\Component\Routing\Attribute\Route('/admin/qr', name: 'qr_index')]
    public function __construct(
        private readonly DownloadHelper $downloadHelper,
        private readonly QrHitTrackerRepository $hitTrackerRepository,
    ) {
    }

    public static function getEntityFqcn(): string
    {
        return Qr::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setDefaultSort(['modifiedAt' => 'DESC']);
    }

    public function new(AdminContext $context)
    {
        return parent::new($context); // TODO: Change the autogenerated stub
    }

    public function configureFields(string $pageName): iterable
    {
        if (Crud::PAGE_INDEX === $pageName) {
            return [
                TextField::new('title', new TranslatableMessage('qr.title'))
                    ->setTemplatePath('fields/link/link_to_edit.html.twig'),
                TextEditorField::new('description', new TranslatableMessage('qr.description')),
                CollectionField::new('urls', new TranslatableMessage('qr.urls'))
                    ->allowAdd()
                    ->allowDelete()
                    ->renderExpanded()
                    ->useEntryCrudForm(UrlCrudController::class),
                ChoiceField::new('mode', new TranslatableMessage('qr.mode.title'))
                    ->renderAsNativeWidget(),
                Field::new('customUrlButton', new TranslatableMessage('qr.preview'))
                    ->setTemplatePath('fields/link/link.html.twig')
                    ->hideOnForm(),
                IntegerField::new('hitTrackers', new TranslatableMessage('Hits'))
                    ->formatValue(function ($value, $entity) {
                        if (null === $entity) {
                            return 0;
                        }

                        return $this->hitTrackerRepository->getHitCount($entity);
                    })
                    ->hideOnForm(),
            ];
        }

        if (Crud::PAGE_EDIT === $pageName) {
            return [
                IdField::new('id', 'ID')
                    ->setDisabled()
                    ->hideOnForm(),
                TextField::new('title', new TranslatableMessage('qr.title')),
                ChoiceField::new('mode', new TranslatableMessage('qr.mode.title'))
                    ->setHelp(new TranslatableMessage('qr.mode.help'))
                    ->renderAsNativeWidget(),
                TextEditorField::new('description', new TranslatableMessage('qr.description')),
                CollectionField::new('urls', new TranslatableMessage('qr.urls'))
                    ->allowAdd()
                    ->allowDelete(false)
                    ->renderExpanded(false)
                    ->useEntryCrudForm(UrlCrudController::class)
                    ->addCssClass('qr-urls-collection'),
            ];
        }

        if (Crud::PAGE_NEW === $pageName) {
            return [
                IdField::new('id', 'ID')
                    ->setDisabled()
                    ->hideOnForm(),
                TextField::new('title', new TranslatableMessage('qr.title')),
                ChoiceField::new('mode', new TranslatableMessage('qr.mode.title'))
                    ->setHelp(new TranslatableMessage('qr.mode.help'))
                    ->renderAsNativeWidget(),
                TextEditorField::new('description', new TranslatableMessage('qr.description')),
                CollectionField::new('urls', new TranslatableMessage('qr.urls'))
                    ->allowAdd()
                    ->allowDelete(false)
                    ->useEntryCrudForm(UrlCrudController::class)
                    ->renderExpanded()
                    ->addCssClass('qr-urls-collection'),

            ];
        }

        return [];
    }

    /**
     * @todo get department choices from somewhere.
     */
    public function configureFilters(Filters $filters): Filters
    {
        return parent::configureFilters($filters)
            ->add(ChoiceFilter::new('department')
                ->setChoices(['a', 'b'])
            )
            ->add('title')
            ->add('description');
    }

    public function configureActions(Actions $actions): Actions
    {
        // Define batch download action
        $batchDownloadAction = Action::new('download', new TranslatableMessage('qr.configure_download'))
            ->linkToCrudAction('batchDownload')
            ->addCssClass('btn btn-success disable-confirm')
            ->setIcon('fa fa-download')
            ->displayAsButton();

        // Define single download action
        $singleDownloadActionNoConfig = Action::new('downloadWithoutConfig', new TranslatableMessage('qr.quick_download_without_config'))
            ->linkToCrudAction('downloadWithoutConfig')
            ->setIcon('fa fa-download');
        $singleDownloadActionConfig = Action::new('downloadWithConfig', new TranslatableMessage('qr.quick_download_with_config'))
            ->linkToCrudAction('downloadWithConfig')
            ->setIcon('fa fa-download');

        // Define batch url change action
        $setUrlAction = Action::new('setUrl', new TranslatableMessage('qr.set_url'))
            ->linkToCrudAction('setUrl')
            ->addCssClass('btn btn-primary')
            ->displayIf(fn () => $this->isGranted('ROLE_ADMIN') || $this->isGranted('ROLE_SUPER_ADMIN'))
            ->setIcon('fa fa-link');

        return $actions
            ->update(Crud::PAGE_INDEX, Action::EDIT, fn (Action $action) => $action->setIcon('fa fa-pencil')->setLabel('qr.edit'))
            ->update(Crud::PAGE_INDEX, Action::DELETE, fn (Action $action) => $action->setIcon('fa fa-trash')->setLabel('qr.delete'))
            ->addBatchAction($batchDownloadAction)
            ->addBatchAction($setUrlAction)
            ->add(Crud::PAGE_INDEX, $singleDownloadActionNoConfig)
            ->add(Crud::PAGE_INDEX, $singleDownloadActionConfig);
    }

    public function setUrl(BatchActionDto $batchActionDto): RedirectResponse
    {
        return $this->redirectToRoute('admin_set_url', $batchActionDto->getEntityIds());
    }

    /**
     * Handles the quick download functionality by generating QR codes for a given entity.
     *
     * @param AdminContext $context the context containing the entity data
     *
     * @return StreamedResponse the response containing the generated QR codes
     *
     * @throws ValidationException
     */
    public function downloadWithoutConfig(AdminContext $context): StreamedResponse
    {
        $qrEntity = $context->getEntity()->getInstance();

        return $this->downloadHelper->generateQrCodes([$qrEntity], []);
    }

    public function downloadWithConfig(AdminContext $context): RedirectResponse
    {
        $entityId = ['id' => $context->getEntity()->getInstance()->getId()];

        return $this->redirectToRoute('admin_batch_download', $entityId);
    }

    /**
     * Handles batch download action, redirecting to the batch download route
     * with the provided entity IDs from the BatchActionDto object.
     *
     * @param BatchActionDto $batchActionDto contains the data for batch action processing
     *
     * @return RedirectResponse redirects to the appropriate route for batch download
     */
    public function batchDownload(BatchActionDto $batchActionDto): RedirectResponse
    {
        return $this->redirectToRoute('admin_batch_download', $batchActionDto->getEntityIds());
    }

    public function configureAssets(Assets $assets): Assets
    {
        return $assets
            ->addWebpackEncoreEntry('app');
    }
}
